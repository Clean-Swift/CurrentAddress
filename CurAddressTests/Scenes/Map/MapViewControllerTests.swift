//
//  MapViewControllerTests.swift
//  CurrentAddress
//
//  Created by Raymond Law on 8/1/17.
//  Copyright (c) 2017 __MyCompanyName__. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CurAddress
import XCTest
import MapKit

// MARK: - Test doubles

struct MapViewControllerFailureSpy
{
  static var alertPresented = false
  static var errorTitle: String?
  static var errorMessage: String?
}

extension MapViewController
{
  override open func present(_ viewControllerToPresent: UIViewController, animated flag: Bool, completion: (() -> Void)? = nil)
  {
    if let alert = viewControllerToPresent as? UIAlertController {
      MapViewControllerFailureSpy.alertPresented = true
      MapViewControllerFailureSpy.errorTitle = alert.title
      MapViewControllerFailureSpy.errorMessage = alert.message
    }
  }
}

class MapViewControllerMapViewSpy: MKMapView
{
  var setCenterCalled = false
  var setCenterCoordinate: CLLocationCoordinate2D!
  
  override func setCenter(_ coordinate: CLLocationCoordinate2D, animated: Bool)
  {
    setCenterCalled = true
    setCenterCoordinate = coordinate
  }
}

class MapBusinessLogicSpy: MapBusinessLogic
{
  var requestForCurrentLocationCalled = false
  var getCurrentLocationCalled = false
  var centerMapCalled = false
  var getCurrentAddressCalled = false
  
  var getCurrentLocationRequest: Map.GetCurrentLocation.Request!
  
  func requestForCurrentLocation(request: Map.RequestForCurrentLocation.Request)
  {
    requestForCurrentLocationCalled = true
  }
  
  func getCurrentLocation(request: Map.GetCurrentLocation.Request)
  {
    getCurrentLocationCalled = true
    getCurrentLocationRequest = request
  }
  
  func centerMap(request: Map.CenterMap.Request)
  {
    centerMapCalled = true
  }
  
  func getCurrentAddress(request: Map.GetCurrentAddress.Request)
  {
    getCurrentAddressCalled = true
  }
}

class MapViewControllerTests: XCTestCase
{
  // MARK: - Subject under test
  
  var sut: MapViewController!
  var window: UIWindow!
  
  // MARK: - Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    window = UIWindow()
    setupMapViewController()
  }
  
  override func tearDown()
  {
    window = nil
    super.tearDown()
  }
  
  // MARK: - Test setup
  
  func setupMapViewController()
  {
    let bundle = Bundle.main
    let storyboard = UIStoryboard(name: "MainStoryboard", bundle: bundle)
    sut = storyboard.instantiateViewController(withIdentifier: "MapViewController") as! MapViewController
  }
  
  func loadView()
  {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }
  
  // MARK: - Tests
  
  // MARK: View lifecycle
  
  func testViewDidLoadShouldRequestForCurrentLocation()
  {
    // Given
    let mapBusinessLogicSpy = MapBusinessLogicSpy()
    sut.interactor = mapBusinessLogicSpy
    
    // When
    loadView()
   
    // Then
    XCTAssertTrue(mapBusinessLogicSpy.requestForCurrentLocationCalled, "viewDidLoad() should ask the interactor to request for current location")
  }
  
  // MARK: Request for current location
  
  func testDisplayRequestForCurrentLocationSuccess()
  {
    // Given
    let mapBusinessLogicSpy = MapBusinessLogicSpy()
    sut.interactor = mapBusinessLogicSpy
    let viewModel = Map.RequestForCurrentLocation.ViewModel(success: true, errorTitle: nil, errorMessage: nil)
    loadView()
    
    // When
    sut.displayRequestForCurrentLocation(viewModel: viewModel)
    
    // Then
    XCTAssertTrue(sut.mapView.showsUserLocation, "displayRequestForCurrentLocation(), given success, should show the current location in the map")
    XCTAssertTrue(mapBusinessLogicSpy.getCurrentLocationCalled, "displayRequestForCurrentLocation(), given success, should ask the interactor to get the current location")
    XCTAssertEqual(mapBusinessLogicSpy.getCurrentLocationRequest.mapView, sut.mapView, "displayRequestForCurrentLocation(), given success, should pass mapView to the interactor")
  }
  
  func testDisplayRequestForCurrentLocationFailure()
  {
    // Given
    let mapBusinessLogicSpy = MapBusinessLogicSpy()
    sut.interactor = mapBusinessLogicSpy
    MapViewControllerFailureSpy.alertPresented = false
    MapViewControllerFailureSpy.errorTitle = nil
    MapViewControllerFailureSpy.errorMessage = nil
    let viewModel = Map.RequestForCurrentLocation.ViewModel(success: false, errorTitle: "failure title", errorMessage: "failure message")
    loadView()
    
    // When
    sut.displayRequestForCurrentLocation(viewModel: viewModel)
    
    // Then
    XCTAssertEqual(MapViewControllerFailureSpy.errorTitle, "failure title", "displayRequestForCurrentLocation(), given failure, should display an appropriate error title")
    XCTAssertEqual(MapViewControllerFailureSpy.errorMessage, "failure message", "displayRequestForCurrentLocation(), given failure, should display an appropriate error message")
  }
  
  // MARK: Get current location
  
  func testDisplayGetCurrentLocationSuccess()
  {
    // Given
    let mapBusinessLogicSpy = MapBusinessLogicSpy()
    sut.interactor = mapBusinessLogicSpy
    let viewModel = Map.GetCurrentLocation.ViewModel(success: true, errorTitle: nil, errorMessage: nil)
    loadView()
    
    // When
    sut.displayGetCurrentLocation(viewModel: viewModel)
    
    // Then
    XCTAssertTrue(mapBusinessLogicSpy.centerMapCalled, "displayGetCurrentLocation(), given success, should ask the interactor to center the map")
    XCTAssertTrue(mapBusinessLogicSpy.getCurrentAddressCalled, "displayGetCurrentLocation(), given success, should ask the interactor to get the current address")
  }
  
  func testDisplayGetCurrentLocationFailure()
  {
    // Given
    let mapBusinessLogicSpy = MapBusinessLogicSpy()
    sut.interactor = mapBusinessLogicSpy
    MapViewControllerFailureSpy.alertPresented = false
    MapViewControllerFailureSpy.errorTitle = nil
    MapViewControllerFailureSpy.errorMessage = nil
    let viewModel = Map.GetCurrentLocation.ViewModel(success: false, errorTitle: "failure title", errorMessage: "failure message")
    loadView()
    
    // When
    sut.displayGetCurrentLocation(viewModel: viewModel)
    
    // Then
    XCTAssertEqual(MapViewControllerFailureSpy.errorTitle, "failure title", "displayRequestForCurrentLocation(), given failure, should display an appropriate error title")
    XCTAssertEqual(MapViewControllerFailureSpy.errorMessage, "failure message", "displayRequestForCurrentLocation(), given failure, should display an appropriate error message")
  }
  
  // MARK: Center map
  
  func testDisplayCenterMap()
  {
    // Given
    let mapBusinessLogicSpy = MapBusinessLogicSpy()
    sut.interactor = mapBusinessLogicSpy
    let coordinate = CurAddressTestHelpers.location.coordinate
    let viewModel = Map.CenterMap.ViewModel(coordinate: coordinate)
    loadView()
    let mapViewSpy = MapViewControllerMapViewSpy()
    sut.mapView = mapViewSpy
    
    // When
    sut.displayCenterMap(viewModel: viewModel)
    
    // Then
    XCTAssert(mapViewSpy.setCenterCalled, "displayCenterMap() should ask the mapView to center")
    XCTAssertEqual(mapViewSpy.setCenterCoordinate.latitude, coordinate.latitude, "displayCenterMap() should center the map with the given latitude")
    XCTAssertEqual(mapViewSpy.setCenterCoordinate.longitude, coordinate.longitude, "displayCenterMap() should center the map with the given longitude")
  }
  
  // MARK: Get current address
  
  func testDisplayGetCurrentAddressSuccess()
  {
    // Given
    let mapBusinessLogicSpy = MapBusinessLogicSpy()
    sut.interactor = mapBusinessLogicSpy
    let viewModel = Map.GetCurrentAddress.ViewModel(success: true)
    loadView()
    
    // When
    sut.displayGetCurrentAddress(viewModel: viewModel)
    
    // Then
    XCTAssertTrue(sut.getAddressButton.isEnabled, "displayGetCurrentAddress(), given success, should enable the getAddressButton")
  }
  
  func testDisplayGetCurrentAddressFailure()
  {
    // Given
    let mapBusinessLogicSpy = MapBusinessLogicSpy()
    sut.interactor = mapBusinessLogicSpy
    let viewModel = Map.GetCurrentAddress.ViewModel(success: false)
    loadView()
    
    // When
    sut.displayGetCurrentAddress(viewModel: viewModel)
    
    // Then
    XCTAssertFalse(sut.getAddressButton.isEnabled, "displayGetCurrentAddress(), given failure, should disable the getAddressButton")
  }
}
