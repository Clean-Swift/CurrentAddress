//
//  MapPresenterTests.swift
//  CurrentAddress
//
//  Created by Raymond Law on 8/1/17.
//  Copyright (c) 2017 __MyCompanyName__. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CurAddress
import XCTest
import MapKit

// MARK: - Test doubles

class MapDisplayLogicSpy: MapDisplayLogic
{
  var displayRequestForCurrentLocationCalled = false
  var displayGetCurrentLocationCalled = false
  var displayCenterMapCalled = false
  var displayGetCurrentAddressCalled = false
  
  var requestForCurrentLocationViewModel: Map.RequestForCurrentLocation.ViewModel!
  var getCurrentLocationViewModel: Map.GetCurrentLocation.ViewModel!
  var centerMapViewModel: Map.CenterMap.ViewModel!
  var getCurrentAddressViewModel: Map.GetCurrentAddress.ViewModel!
  
  func displayRequestForCurrentLocation(viewModel: Map.RequestForCurrentLocation.ViewModel)
  {
    displayRequestForCurrentLocationCalled = true
    requestForCurrentLocationViewModel = viewModel
  }
  
  func displayGetCurrentLocation(viewModel: Map.GetCurrentLocation.ViewModel)
  {
    displayGetCurrentLocationCalled = true
    getCurrentLocationViewModel = viewModel
  }
  
  func displayCenterMap(viewModel: Map.CenterMap.ViewModel)
  {
    displayCenterMapCalled = true
    centerMapViewModel = viewModel
  }
  
  func displayGetCurrentAddress(viewModel: Map.GetCurrentAddress.ViewModel)
  {
    displayGetCurrentAddressCalled = true
    getCurrentAddressViewModel = viewModel
  }
}

class MapPresenterTests: XCTestCase
{
  // MARK: - Subject under test
  
  var sut: MapPresenter!
  
  // MARK: - Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupMapPresenter()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: - Test setup
  
  func setupMapPresenter()
  {
    sut = MapPresenter()
  }
  
  // MARK: - Tests
  
  // MARK: Request for current location
  
  func testPresentRequestForCurrentLocationSuccess()
  {
    // Given
    let mapDisplayLogicSpy = MapDisplayLogicSpy()
    sut.viewController = mapDisplayLogicSpy
    let response = Map.RequestForCurrentLocation.Response(success: true)
    
    // When
    sut.presentRequestForCurrentLocation(response: response)
    
    // Then
    XCTAssertTrue(mapDisplayLogicSpy.displayRequestForCurrentLocationCalled, "presentRequestForCurrentLocation(), given success, should ask the view controller to display the result")
    XCTAssertTrue(mapDisplayLogicSpy.requestForCurrentLocationViewModel.success, "presentRequestForCurrentLocation(), given success, should pass success to the view controller")
    XCTAssertNil(mapDisplayLogicSpy.requestForCurrentLocationViewModel.errorTitle, "presentRequestForCurrentLocation(), given success, should not set an error title")
    XCTAssertNil(mapDisplayLogicSpy.requestForCurrentLocationViewModel.errorMessage, "presentRequestForCurrentLocation(), given success, should not set an error message")
  }
  
  func testPresentRequestForCurrentLocationFailure()
  {
    // Given
    let mapDisplayLogicSpy = MapDisplayLogicSpy()
    sut.viewController = mapDisplayLogicSpy
    let response = Map.RequestForCurrentLocation.Response(success: false)
    
    // When
    sut.presentRequestForCurrentLocation(response: response)
    
    // Then
    XCTAssertTrue(mapDisplayLogicSpy.displayRequestForCurrentLocationCalled, "presentRequestForCurrentLocation(), given failure, should ask the view controller to display the result")
    XCTAssertFalse(mapDisplayLogicSpy.requestForCurrentLocationViewModel.success, "presentRequestForCurrentLocation(), given failure, should pass failure to the view controller")
    XCTAssertEqual(mapDisplayLogicSpy.requestForCurrentLocationViewModel.errorTitle, "Location Disabled", "presentRequestForCurrentLocation(), given failure, should set an error title")
    XCTAssertEqual(mapDisplayLogicSpy.requestForCurrentLocationViewModel.errorMessage, "Please enable location services in the Settings app.", "presentRequestForCurrentLocation(), given failure, should set an error message")
  }
  
  // MARK: Get current location
  
  func testPresentGetCurrentLocationSuccess()
  {
    // Given
    let mapDisplayLogicSpy = MapDisplayLogicSpy()
    sut.viewController = mapDisplayLogicSpy
    let response = Map.GetCurrentLocation.Response(success: true, error: nil)
    
    // When
    sut.presentGetCurrentLocation(response: response)
    
    // Then
    XCTAssertTrue(mapDisplayLogicSpy.displayGetCurrentLocationCalled, "presentGetCurrentLocation(), given success, should ask the view controller to display the result")
    XCTAssertTrue(mapDisplayLogicSpy.getCurrentLocationViewModel.success, "presentGetCurrentLocation(), given success, should pass success to the view controller")
    XCTAssertNil(mapDisplayLogicSpy.getCurrentLocationViewModel.errorTitle, "presentGetCurrentLocation(), given success, should not set an error title")
    XCTAssertNil(mapDisplayLogicSpy.getCurrentLocationViewModel.errorMessage, "presentGetCurrentLocation(), given success, should not set an error message")
  }
  
  func testPresentGetCurrentLocationFailureLocationUnknown()
  {
    // Given
    let mapDisplayLogicSpy = MapDisplayLogicSpy()
    sut.viewController = mapDisplayLogicSpy
    let error = NSError(domain: kCLErrorDomain, code: CLError.locationUnknown.rawValue, userInfo: nil)
    let response = Map.GetCurrentLocation.Response(success: false, error: error)
    
    // When
    sut.presentGetCurrentLocation(response: response)
    
    // Then
    XCTAssertTrue(mapDisplayLogicSpy.displayGetCurrentLocationCalled, "presentGetCurrentLocation(), given failure (location unknown), should ask the view controller to display the result")
    XCTAssertFalse(mapDisplayLogicSpy.getCurrentLocationViewModel.success, "presentGetCurrentLocation(), given failure (location unknown), should pass failure to the view controller")
    XCTAssertEqual(mapDisplayLogicSpy.getCurrentLocationViewModel.errorTitle, "Error", "presentGetCurrentLocation(), given failure (location unknown), should set an error title")
    XCTAssertEqual(mapDisplayLogicSpy.getCurrentLocationViewModel.errorMessage, "Your location could not be determined.", "presentGetCurrentLocation(), given failure (location unknown), should set an error message")
  }
  
  func testPresentGetCurrentLocationFailureOtherErrors()
  {
    // Given
    let mapDisplayLogicSpy = MapDisplayLogicSpy()
    sut.viewController = mapDisplayLogicSpy
    let error = NSError(domain: kCLErrorDomain, code: CLError.network.rawValue, userInfo: nil)
    let response = Map.GetCurrentLocation.Response(success: false, error: error)
    
    // When
    sut.presentGetCurrentLocation(response: response)
    
    // Then
    XCTAssertTrue(mapDisplayLogicSpy.displayGetCurrentLocationCalled, "presentGetCurrentLocation(), given failure (other errors), should ask the view controller to display the result")
    XCTAssertFalse(mapDisplayLogicSpy.getCurrentLocationViewModel.success, "presentGetCurrentLocation(), given failure (location unknown), should pass failure to the view controller")
    XCTAssertEqual(mapDisplayLogicSpy.getCurrentLocationViewModel.errorTitle, "Error", "presentGetCurrentLocation(), given failure (location unknown), should set an error title")
    XCTAssertEqual(mapDisplayLogicSpy.getCurrentLocationViewModel.errorMessage, error.localizedDescription, "presentGetCurrentLocation(), given failure (location unknown), should set an error message")
  }
  
  // MARK: Center map
  
  func testPresentCenterMap()
  {
    // Given
    let mapDisplayLogicSpy = MapDisplayLogicSpy()
    sut.viewController = mapDisplayLogicSpy
    let coordinate = CurAddressTestHelpers.location.coordinate
    let response = Map.CenterMap.Response(coordinate: coordinate)
    
    // When
    sut.presentCenterMap(response: response)
    
    // Then
    XCTAssertTrue(mapDisplayLogicSpy.displayCenterMapCalled, "presentCenterMap() should ask the view controller to display the result")
    XCTAssertEqual(mapDisplayLogicSpy.centerMapViewModel.coordinate.latitude, coordinate.latitude, "presentCenterMap() should pass latitude to the view controller")
    XCTAssertEqual(mapDisplayLogicSpy.centerMapViewModel.coordinate.longitude, coordinate.longitude, "presentCenterMap() should pass longitude to the view controller")
  }
  
  // MARK: Get current address
  
  func testPresentGetCurrentAddressSuccess()
  {
    // Given
    let mapDisplayLogicSpy = MapDisplayLogicSpy()
    sut.viewController = mapDisplayLogicSpy
    let response = Map.GetCurrentAddress.Response(success: true)
    
    // When
    sut.presentGetCurrentAddress(response: response)
    
    // Then
    XCTAssertTrue(mapDisplayLogicSpy.displayGetCurrentAddressCalled, "presentGetCurrentAddress(), given success, should ask the view controller to display the result")
    XCTAssertTrue(mapDisplayLogicSpy.getCurrentAddressViewModel.success, "presentGetCurrentAddress(), given success, should pass success to the view controller")
  }
  
  func testPresentGetCurrentAddressFailure()
  {
    // Given
    let mapDisplayLogicSpy = MapDisplayLogicSpy()
    sut.viewController = mapDisplayLogicSpy
    let response = Map.GetCurrentAddress.Response(success: false)
    
    // When
    sut.presentGetCurrentAddress(response: response)
    
    // Then
    XCTAssertTrue(mapDisplayLogicSpy.displayGetCurrentAddressCalled, "presentGetCurrentAddress(), given failure, should ask the view controller to display the result")
    XCTAssertFalse(mapDisplayLogicSpy.getCurrentAddressViewModel.success, "presentGetCurrentAddress(), given failure, should pass failure to the view controller")
  }
}
